/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/QnsbYWQ0yff
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Button } from "@/components/ui/button"

export function ReportDashboard() {
  const [dateRange, setDateRange] = useState({
    startDate: new Date("2023-01-01"),
    endDate: new Date("2023-12-31"),
  })
  const handleDateRangeChange = (range:any) => {
    setDateRange(range)
  }
  const data = useMemo(() => {
    return [
      { id: 1, name: "Product A", revenue: 10000, orders: 500 },
      { id: 2, name: "Product B", revenue: 15000, orders: 800 },
      { id: 3, name: "Product C", revenue: 8000, orders: 300 },
      { id: 4, name: "Product D", revenue: 12000, orders: 400 },
      { id: 5, name: "Product E", revenue: 18000, orders: 600 },
    ]
  }, [dateRange])
  const handleExportPDF = () => {
    console.log("Exporting to PDF...")
  }
  const handleExportCSV = () => {
    console.log("Exporting to CSV...")
  }
  return (
    <div className="flex flex-col gap-6 p-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Reporting Dashboard</h1>
        <div className="bg-white dark:bg-gray-950 rounded-lg px-4 py-2 text-sm" />
      </div>
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card>
          <CardHeader>
            <CardTitle>Total Revenue</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">${data.reduce((total, product) => total + product.revenue, 0)}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Total Orders</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">{data.reduce((total, product) => total + product.orders, 0)}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Average Order Value</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold">
              $
              {(
                data.reduce((total, product) => total + product.revenue, 0) /
                data.reduce((total, product) => total + product.orders, 0)
              ).toFixed(2)}
            </div>
          </CardContent>
        </Card>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Product Performance</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Product</TableHead>
                <TableHead className="text-right">Revenue</TableHead>
                <TableHead className="text-right">Orders</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {data.map((product) => (
                <TableRow key={product.id}>
                  <TableCell>{product.name}</TableCell>
                  <TableCell className="text-right">${product.revenue.toFixed(2)}</TableCell>
                  <TableCell className="text-right">{product.orders}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
        <CardFooter className="flex justify-end gap-2">
          <Button variant="outline" onClick={handleExportPDF}>
            <DownloadIcon className="w-4 h-4 mr-2" />
            Export to PDF
          </Button>
          <Button variant="outline" onClick={handleExportCSV}>
            <DownloadIcon className="w-4 h-4 mr-2" />
            Export to CSV
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}

function DownloadIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="7 10 12 15 17 10" />
      <line x1="12" x2="12" y1="15" y2="3" />
    </svg>
  )
}
